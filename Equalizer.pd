#N canvas 73 310 968 450 12;
#N canvas 562 75 643 640 fft-analysis 0;
#X obj 15 164 *~;
#X obj 15 102 inlet~;
#X obj 15 218 rfft~;
#X obj 33 138 tabreceive~ \$0-hann;
#X obj 15 355 *~;
#X obj 53 355 *~;
#X obj 11 34 block~ 512 4;
#X text 66 88 The inlet~ now re-uses 3/4 of the previous block \, along
with the 128 new samples.;
#X text 221 141 window function as before.;
#X obj 71 231 *~;
#X obj 14 501 *~;
#X obj 35 476 tabreceive~ \$0-hann;
#X obj 71 285 /~ 768;
#X text 95 303 divide by 3N/2 (factor of N because rfft and rifft aren't
normalized \, and 3/2 is the gain of overlap-4 reconstruction when
Hann window function is applied twice.);
#X text 107 226 Just to show we're doing something \, we multiply each
channel by a gain controlled by an array in the main window. The control
is quartic-scaled for easy editing.;
#X obj 71 257 *~;
#X text 89 359 Multiply the (complex-valued) spectrum amplitudes by
the (real-valued) gain-and-normalization-factor;
#X obj 14 399 rifft~;
#X text 88 396 Real-valued inverse Fourier transform. This uses only
the first N/@ points of its inputs \, supplying the rest by symmerty
(so it's OK that rfft~ obly puts out those N/2 points.) There's only
one outlet because the output is real-valued.;
#X obj 14 561 outlet~;
#X text 86 494 Multiply by the Hann window function again \, necessary
because the operation we performed might result in a signal that doesn't
go smoothly to zero at both ends.;
#X text 87 561 This repackages the output into 64-sample chunks for
the parent window. Since we're operating with an overlap \, the outlet~
object performs an overlapped sum of the blocks computed in this window.
;
#X text 114 24 block~ object specifies vector size of 512 and overlap
four. This window now computes blocks of 512 samples at intervals of
128 samples computed on the parent patch.;
#X obj 71 204 clip~ 0 2;
#X obj 71 176 tabreceive~ \$0-spectrum;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 1 5 0;
#X connect 3 0 0 1;
#X connect 4 0 17 0;
#X connect 5 0 17 1;
#X connect 9 0 15 0;
#X connect 9 0 15 1;
#X connect 10 0 19 0;
#X connect 11 0 10 1;
#X connect 12 0 4 1;
#X connect 12 0 5 1;
#X connect 15 0 12 0;
#X connect 17 0 10 0;
#X connect 23 0 9 0;
#X connect 23 0 9 1;
#X connect 24 0 23 0;
#X restore 86 210 pd fft-analysis;
#N canvas 35 66 592 433 Hann-window 0;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-hann 512 float 0;
#X coords 0 1 511 0 200 120 1;
#X restore 293 249 graph;
#X msg 171 263 0;
#X obj 65 312 osc~;
#X obj 65 264 samplerate~;
#X obj 65 335 *~ -0.5;
#X obj 65 358 +~ 0.5;
#X obj 57 383 tabwrite~ \$0-hann;
#X text 279 241 1;
#X text 272 359 0;
#X text 288 372 0;
#X obj 65 288 / 512;
#X obj 57 241 bng 15 250 50 0 empty empty empty 0 -6 0 8 #fcfcfc #000000
#000000;
#X text 336 221 Hann window;
#X text 113 310 period 512;
#X text 90 215 recalculate Hann;
#X text 125 230 window table;
#X obj 57 146 loadbang;
#X msg 79 179 \; pd dsp 1;
#X text 40 27 The Hann window is now recomputed on 'loadbang' to make
the file smaller (it doesn't have to be saved with the array.);
#X text 474 375 511;
#X connect 1 0 2 1;
#X connect 2 0 4 0;
#X connect 3 0 10 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 10 0 2 0;
#X connect 11 0 3 0;
#X connect 11 0 1 0;
#X connect 11 0 6 0;
#X connect 16 0 11 0;
#X connect 16 0 17 0;
#X restore 378 271 pd Hann-window;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-spectrum 256 float 5;
#A 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1;
#X coords 0 2 255 -0.01 286 60 2 0 0;
#X restore 107 135 graph;
#X obj 86 70 inlet~ signalIn;
#X obj 86 239 outlet~ signalOut;
#X msg 378 217 const 1;
#X obj 378 113 bng 15 250 50 0 empty empty Reset: -40 7 0 10 #fcfcfc
#000000 #000000;
#X text 85 275 Inlet:;
#X text 85 322 Outlet:;
#X text 85 339 1 Signal out;
#X text 85 292 1 Signal in;
#X text 438 119 Using Fourier resynthesis you can take an incoming
sound \, operate on its spectrum (by drawing the frequency envelope
in the window) \, and hear the result. The window ranges from 0-22000
hertz on the x-axis \, and 0-2 amplitude on the y-axis.;
#X obj 378 246 s \$0-spectrum;
#X obj 378 64 loadbang;
#X text 438 97 Description:;
#X connect 0 0 4 0;
#X connect 3 0 0 0;
#X connect 5 0 12 0;
#X connect 6 0 5 0;
#X connect 13 0 6 0;
#X coords 0 -1 1 1 300 100 1 100 100;
